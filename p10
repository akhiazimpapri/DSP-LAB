# 10. Design a low pass FIR filter to remove high-frequency noise from a signal using 
# convolution.

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import firwin #To design FIR filters (window method) 
#(pip install scipy)

fs = 500
n = np.arange(0,1,1/fs)

clean_signal = np.sin(2*np.pi*10*n)
noise_signal = np.sin(2*np.pi*100*n)
x = clean_signal + noise_signal

cutoff = 0.1 #This is the normalized cutoff frequency (0.1 × Nyquist = 0.1 × 250 = 25 Hz)
h = firwin(31, cutoff) #Designs a 31-tap low-pass FIR filter using the window method (The filter passes frequencies below 25 Hz (includes 10 Hz), and removes high frequencies (like 100 Hz))


def convolution(x, h):
    len_x = len(x)
    len_h = len(h)
    len_y = len(x) + len(h) - 1
    y = []
    for i in range(len_y):
        sum = 0
        for k in range(len_h):
            if i-k >= 0 and i-k < len_x:
                sum += h[k] * x[i-k]
        y.append(sum)
    return y     

#i-k >= 0: avoids negative indices
#i-k < len_x: ensures you don’t go beyond the signal

filtered_signal = convolution(x,h)

start = (len(h) - 1) // 2 # delay of (N−1)/2 samples → here it's 15
filtered_signal = filtered_signal[start:start + len(x)]

#plot
plt.figure(figsize=(10,4))
plt.plot(n, x, 'r', label='Noise Signal')
plt.plot(n, clean_signal, 'green', label='Clean Signal')
plt.plot(n, filtered_signal,'b', label='Filtered Signal')
plt.legend()
plt.title('Low pass filter Output')
plt.xlabel('Time(s)')
plt.ylabel('Amplitude')
plt.grid(True)
plt.tight_layout()
plt.show()
